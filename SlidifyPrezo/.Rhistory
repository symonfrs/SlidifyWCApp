pal(0)
pal(1)
pal(seq(0,1,len=6))
pal<-colorRampPalette(c("red","blue"))
p1<-colorRampPalette(c("red","blue"))
p1(2)
p1(6)
Oxcc
0xcc
p2<-colorRampPalette(c("red","yellow"))
p2(2)
p2910)
p2(10)
showme(p1(20))
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3<-colorRampPalette(c("blue","green"),alpha=0.5)
p3(5)
plot(x,y,pch=19,col=rgb(0,0.5,0.5))
plot(x,y,pch=19,col=rgb(0,0.5,0.5,0.3))
cols<-brewer.pal(3,"BuGn")
showMe(cols)
pal<-colorRampPalette(cols)
showMe(pal(20)
)
image(volcano,pal(20))
image(volcano,col(pal(20)))
image(volcano,col=(pal(20)))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(hwy,displ,mpg)
qplot(y=hwy,x=displ,mpg)
qplot(hwy,displ,data=mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color=drv)
buyujhjj,, hgbb
ghuhjby6gj,
qplot(displ,hwy,data=mpg,color=drv,geom(c(point,smooth)))
qplot(displ,hwy,data=mpg,color=drv,geom=c(point,smooth))
qplot(displ,hwy,data=mpg,color=drv, geom=c(point,smooth))
qplot(displ, hwy, data = mpg, color = drv, geom = c(point, smooth))
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y=hwy, data = mpg, color = drv)
myhigh
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,facets=. ~ drv)
qplot(hwy,data=mpg,facets=drv ~ .,binwidth=2)
qplot(data - displ, hwy, and data=mpg,geom=c("point","smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, and data=mpg,geom=c("point","smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data=mpg,geom=c("point","smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data=mpg,geom=c("point","smooth"),facets=.~drv,method = "loess")
qplot(displ, hwy, data=mpg,geom=c("point","smooth"),facets=.~drv, method="loess")
qplot(displ, hwy, data=mpg,geom=c("point","smooth"),facets=.~drv, "loess")
qplot(displ, hwy, data=mpg,geom=c("point","smooth"),facets=.~drv, methods="loess")
qplot(displ, hwy, data=mpg,geom=c("point","smooth"),facets=.~drv, methods="loess")
?qplot
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv, methods="loess")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv, method="loess")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method="loess")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,"loess")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
qplot(displ, hwy, data = mpg, geom=c("point","smooth"),facets=.~drv,method="loess")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
0
info()
bye()
library(swirl)
swirl()
library(swirl)
swirl()
qplot(displ, hwy, data=mpg, geom=c("point","smooth"),facets=.~drv)
library(swirl)
swirl()
bye()
swirl()
swirl()
qplot(displ, hwy, data=mpg, geom=c("point","smooth"),facets=.~drv)
info()
skip()
skip()
swirl()
skip()
library(swirl)
swirl()
skip()
swirl()
qplot(displ, hwy, data=mpg, geom=c("point","smooth"),facets=.~drv)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
info()
skip()
bye()
library(swirl)
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
qplot(displ, hwy, data=mpg, geom=c("point","smooth"))
qplot(displ, hwy, data=mpg, geom=c("point","smooth"))
library(swirl)
swirl()
qplot(displ, hwy, data=mpg,geom=c("point","smooth"))
bye()
remove.packages(ggplot2)
library("ggplot2", lib.loc="~/R/win-library/3.2")
library("ggplot2", lib.loc="~/R/win-library/3.2")
remove.packages("ggplot2", lib="~/R/win-library/3.2")
install.packages("ggplot")
install.packages("ggplot2")
?qplot
swirl()
library(swirl)
swirl()
qplot(displ, hwy,data=mpg,geom=c("point","smooth"))
bye()
library(swirl)
swirl()
qplot(displ, hwy, data=mpg, geom=c("point","smooth"))
> ggplot(mpg,displ,hwy)
ggplot(mpg,displ,hwy)
g<-ggplot(mpg,aes(displ,hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(. ~ drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(. ~ drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2,aes(color=drv))
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv))+theme_bw(base_family="Times")
plot(myx, myy, type="l", ylim=c(-3,3))
g<-ggplot(testdat,aes(x=myx,y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g<-ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price,diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
range(diamonds$price,binwidth=18497/30)
qplot(diamonds$price,binwidth=18497/30)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30,fill=cut())
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density",color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape=cut)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut,geom=c("point","smooth",method="lm"))
qplot(carat,price,data=diamonds,color=cut,geom=c("point","smooth"),method="lm")
bye()
library(swirl)
swirl()
str(diamonds)
qplot(price,diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density",color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape=cut)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut,geom=c("point","smooth"))
library(swirl)
swirl()
str(diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density",color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape=cut)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut,geom=c("point","smooth"))
qplot(carat,price,data=diamonds,color=cut,geom=c("point","smooth"),facets=.~cut)
g<-ggplot(diamonds,aes(depth,price))
summary(g)
g+geom_point(alpha=1/2)
g+geom_point(alpha=1/3)
cutpoints<-quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
cut(diamonds$carat,cutpoints)
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g<-ggplot(diamonds,aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2 )
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2 )+geom_smooth(method="lm",size=3,color="pink")
g<-ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(. ~ cut)
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(. ~ cut)
library(swirl)
swirl()
dist(dataframe)
dist(dataFrame)
hc<-hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=0.4,col="red")
5
abline(h=0.05,col="red")
12
abline(h=0.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix,cm.colors(25))
heatmap(dataMatrix,color=cm.colors(25))
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
library(swirl)
swirl()
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,cols1[newClust])
points(x,y,pch=19,cex=2,cols[newClust])
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newcx,newcy,col=cols1,pch=8,xec=2,lwd=2)
points(newcx,newcy,col=cols1,pch=8,cex=2,lwd=2)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x,y,pch=8,cex=2,col=cols1[newClust2])
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R",local=TRUE)
heatmp(dataMatrix)
heatmap(dataMatrix)
mat
svd(mat)
matu%*%diag%*%t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[1]
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2
svd2$v[,2]
svd2$v[,1:2]
svd2$d
dim(faceData)
a1<-svd1$%*%usvd1$d%*%svd1$v
a1<-svd1$u%*%svd1$d%*%svd1$v
a1<-(svd1$u[,1])*(svd1$d[1])%*%svd1$v
a1<-(svd1$u[,1])*(svd1$d[1])*(svd1$v)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- (svd1$u[,1:2] * svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
library(swirl)
swirl()
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject)))
sum(table(ssd$subject))
table(ssd$activity)
sub1<-subset(ssd,subject=1)
sub1<-subset(ssd,subject==1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist<-dist(sub1[,1:3])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
mdist<_dist(sub1[,10:12])
mdist<-dist(sub1[,10:12])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity)
myplclust(hclustering,lab.col= unclass(sub1$activity)
hclust(hclustering,lab.col= unclass(sub1$activity)
myplclust(hclustering,lab.col= unclass(sub1$activity))
svd1<-svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon<-which.max(svd1$v)
maxCon <- which.max(svd1$v[,2])
mdist<-dist(sub1[,10:12])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust<-kmeans(sub1[,-c(562,563)],centers=6)
table(kClust$cluster,sub1$activity)
kClust<-kmeans(sub1[,-c(562,563)],centers=6,nstart=100)
table(kClust$cluster,sub1$activity)
dim(x$y)
dim(kClust$y)
dim(kClust$centers)
laying<-which(kClust$size==29)
plot(kClust$centers[laying,1:12],pch=19,ylab="Laying Cluster")
names(sub1[,1:3])
walkdown<-which(kClust$size==49)
plot(kClust$centers[walkdown,1:12],pch=19,ylab="Walkdown Cluster")
swirl()
?sprintf
?fsep
??fsep
?file.path
sprintf("%03d",7)
sprintf("%04d",7)
sprintf("%0d",88)
sprintf("%0d",8)
sprintf("%03d",8)
sprintf("%03d",88)
sprintf("%03d",188)
sprintf("%03d",1880)
paste(sprintf("%03d", 9), ".csv", sep = "")
paste(sprintf("%03d", 9), ".csv", sep = " ")
paste(sprintf("%03d", 9), ".csv", sep = "-")
paste(sprintf("%03d", 9), ".csv", ".xls", sep = "")
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames<-strsplit(cnames,"|",fixed=TRUE)
cnames
names(pm0)<-make.names(cnames[[1]][wcol])
head(pm0)
x0<-pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1)<-make.names(cnames[[1]][wcol])
dim(pm1)
x1<-pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative<-x1<0
sum(negative,na.rm=TRUE)
mean(negative,na.rm=TRUE)
dates<-pm1$Date
str(dates)
dates<-as.Date(as.character(dates),%Y%m%d)
dates<-as.Date(as.character(dates,%Y%m%d))
dates<-as.Date(as.character(dates,"%Y%m%d"))
dates<-as.Date(as.character(dates),"%Y%m%d")
head(dates)
hist(dates[negative],"month")
str(site0)
both<-intersect(site0,site1)
both
head(pm0)
cnt0<-subset(pm0,State.Code==36 & county.site %in% both)
cnt1<-subset(pm1,State.Code==36 & county.site %in% both)
sapply(cnt0,cnt0$county.site,nrow)
sapply(split(cnt0,cnt0$county.site),nrow)
sapply(split(cnt1,cnt1$county.site),nrow)
pm0sub<suset(cnt0,County.Code==63 & Site.ID=2008)
pm0sub<suset(cnt0,County.Code==63 & Site.ID==2008)
pm0sub<-suset(cnt0,County.Code==63 & Site.ID==2008)
pm0sub<-subset(cnt0,County.Code==63 & Site.ID==2008)
pm1sub<-subset(cnt1,County.Code==63 & Site.ID==2008)
xosub<-pm0$Sample.Value
xosub<-pm0sub$Sample.Value
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0<-as.Date(as.character(pm0sub$Date),"%Y%m%d")
dates1<-as.Date(as.character(pm1sub$Date),"%Y%m%d")
par(mfrow=c(1,2),mar=c(4,4,2,1))
plot(dates0, x0sub, pch=20)
abline(h=median(x0sub),lwd=2,na.rm=TRUE)
abline(h=median(x0sub,na.rm=TRUE),lwd=2)
plot(dates1, x1sub, pch=20)
abline(h=median(x1sub,na.rm=TRUE),lwd=2)
rng<-range(x0sub, x1sub, na.rm =TRUE)
rng
mn0<-with(pm0,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn0)
mn1<-with(pm1,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0<-data.frame(state=names(mn0),mean=mn0)
d1<-data.frame(state=names(mn1),mean=mn1)
mrg<-merge(d0, d1, by="state")
dim(mrg)
head(mrg)
with(mrg,rep(1,52),mrg[,2],xlim=c(.5,2.5))
with(mrg,rep(1,52),mrg[,2],xlim=c(.5,2.5)))
with(mrg,plot(rep(1,52),mrg[,2],xlim=c(.5,2.5)))
with(mrg,points(rep(2,52),mrg[,3]))
segments(rep(1,52),mrg[,2],rep(2,52),mrg[,3])
mrg[mrg$mean.x < mrg$mean.y, ]
install.packages("stats")
install.packages("stats")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
install.packages("rCharts")
runExample("01_hello") # a histogram
library(shiny)
runExample("01_hello") # a histogram
runExample("02_text") # tables and data frames
runExample("03_reactivity") # a reactive expression
runExample("04_mpg") # global variables
runExample("04_mpg") # global variables
runExample("05_sliders") # slider bars
runExample("06_tabsets") # tabbed panels
runExample("07_widgets") # help text and submit buttons
runExample("08_html") # Shiny app built from HTML
runExample("08_html") # Shiny app built from HTML
runExample("08_html") # Shiny app built from HTML
runExample("09_upload") # file upload wizard
runExample("10_download") # file download wizard
runExample("11_timer") # an automated timer
x    <- faithful[, 2]  # Old Faithful Geyser data
x
bins <- seq(min(x), max(x), length.out = input$bins + 1)
bins <- seq(min(x), max(x), length.out = 30 + 1)
bins
min(x)
max(x)
hist(x, breaks = bins, col = 'darkgray', border = 'white')
hist(x, breaks = bins, col = 'lightblue', border = 'white')
hist(x, breaks = bins, col = 'darkgrey', border = 'white')
faithful
shiny::runApp('B:/Studies/Coursera/Data Science Specialization/9-Data Products/Shinny/R_Examples/KMeans')
shiny::runApp('B:/Studies/Coursera/Data Science Specialization/9-Data Products/Shinny/R_Examples/KMeans')
shiny::runApp('B:/Studies/Coursera/Data Science Specialization/9-Data Products/Shinny/R_Examples/KMeans')
shiny::runApp('B:/Studies/Coursera/Data Science Specialization/9-Data Products/Shinny/R_Examples/KMeans')
shiny::runApp('B:/Studies/Coursera/Data Science Specialization/9-Data Products/Shinny/R_Examples/KMeans')
library(insuranceData)
shiny::runApp('B:/Studies/Coursera/Data Science Specialization/9-Data Products/Shinny/R_Examples/KMeans')
shiny::runApp('B:/Studies/Coursera/Data Science Specialization/9-Data Products/Shinny/R_Examples/KMeans')
library(insuranceData)
WCdat<-data("WorkersComp")
datrows<-nrow(WCdat);datcols<-ncol(WCdat)
uniquecids<-length(unique(WCdat$CL)); uniyearids<-length(unique(WCdat$YR))
WCdat<-data("WorkersComp")
View(testdat)
WCdat<-data(WorkersComp)
library(insuranceData)
WCdat<-data("WorkersComp")
data("WorkersComp")
data("WorkersComp")
WCdat<-WorkersComp
datrows<-nrow(WCdat);datcols<-ncol(WCdat)
uniquecids<-length(unique(WCdat$CL)); uniyearids<-length(unique(WCdat$YR))
datfields<-names(WCdat)
setwd("C:\\Users\\Symon\Documents\\GitHub")
setwd("C:\\Users\\Symon\\Documents\\GitHub")
author('SlidifyPrezo')
library(slidify)
author('SlidifyPrezo')
